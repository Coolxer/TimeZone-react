{"version":3,"sources":["logo.svg","components/Api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Api","props","dynamictime","setState","currentTime","moment","format","selectHandler","event","selectZone","target","value","setTime","url","axios","get","then","response","time","data","datetime","localTime","changeTimeFormat","split","console","log","selectedDate","selectedTime","selectedGmt","includes","catch","error","state","posts","timeZone","zones","setInterval","hours","mins","this","location","timezone","className","onChange","length","map","loc","key","undefined","Component","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,sNCiI5BC,E,YA3Hb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAmCRC,YAAc,WACZ,EAAKC,SAAS,CAAEC,YAAaC,MAASC,OAAO,8BArC5B,EAuCnBC,cAAgB,SAAAC,GACd,EAAKL,SAAS,CAAEM,WAAYD,EAAME,OAAOC,QACzC,EAAKC,QAAQJ,IAzCI,EA2CnBI,QAAU,SAAAJ,GACR,IAAIK,EAAM,yCAA2CL,EAAME,OAAOC,MAElEG,IACGC,IAAIF,GACJG,MAAK,SAAAC,GAEJ,IAAIC,EAAOD,EAASE,KAAKC,SACrBC,EAAY,EAAKC,iBAAiBJ,EAAKK,MAAM,KAAK,GAAGA,MAAM,KAAK,IACpEC,QAAQC,IAAIJ,GACZ,EAAKlB,SAAS,CACZuB,aAAcR,EAAKK,MAAM,KAAK,GAC9BI,aAAcN,EACdO,YAAaV,EAAKW,SAAS,KACvBX,EAAKK,MAAM,KAAK,GAChBL,EAAKK,MAAM,KAAK,QAIvBO,OAAM,SAAAC,GAAK,OAAIP,QAAQC,IAAIM,OA5D9B,EAAKC,MAAQ,CACXC,MAAO,GACPC,SAAU,GACV9B,YAAa,GACb+B,MAAO,GACP1B,WAAY,GACZkB,aAAc,GACdD,aAAc,GACdE,YAAa,IAVE,E,iFAaE,IAAD,OAClBd,IACGC,IAAI,mCACJC,MAAK,SAAAC,GAEJ,EAAKd,SAAS,CAAE+B,SAAUjB,EAASE,UAEpCW,OAAM,SAAAC,GAAK,OAAIP,QAAQC,IAAIM,MAE9BjB,IACGC,IAAI,yCACJC,MAAK,SAAAC,GAEJ,EAAKd,SAAS,CAAEgC,MAAOlB,EAASE,UAEjCW,OAAM,SAAAC,GAAK,OAAIP,QAAQC,IAAIM,MAE9BK,aAAY,WACV,EAAKlC,gBACJ,O,uCAgCYgB,GACf,IAAImB,EAAQnB,EAAKK,MAAM,KAAK,GACxBe,EAAOpB,EAAKK,MAAM,KAAK,GAAK,IAAML,EAAKK,MAAM,KAAK,GAMtD,OAJAc,EACEA,EAAQ,GAAKA,EAAQ,GAAoBA,EAAL,IAAVA,EAAuB,GAAeA,EAEhEnB,EAAKK,MAAM,KAAK,IAAM,GAAtB,UAA8Bc,EAA9B,YAAuCC,EAAvC,iBAAsDD,EAAtD,YAA+DC,EAA/D,S,+BAGM,IAAD,EAUHC,KAAKP,MAPPE,GAHK,EAELD,MAFK,EAGLC,UAEAzB,GALK,EAIL0B,MAJK,EAKL1B,YACAkB,EANK,EAMLA,aACAvB,EAPK,EAOLA,YACAsB,EARK,EAQLA,aAGEc,GAXG,EASLZ,YAEaW,KAAKP,MAAMG,OAC1B,OACE,6BACE,gCACE,yCACA,sDAA4BD,EAASO,SAArC,KACA,mDAAyBrC,GACzB,4BACEsC,UAAU,wBACVC,SAAUJ,KAAKhC,eAEf,4BAAQI,MAAM,IAAd,wBACC6B,EAASI,OACNJ,EAASK,KAAI,SAAAC,GAAG,OACd,4BAAQC,IAAKD,EAAKnC,MAAOmC,GACtBA,MAGL,IAEN,4BAAKrC,GACa,KAAjBiB,QAAwCsB,IAAjBtB,EACtB,oCAAUA,GAEV,GAEgB,KAAjBC,QAAwCqB,IAAjBrB,EACtB,oCAAUA,GAEV,S,GAnHMsB,aCOHC,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCKcS,QACW,cAA7BC,OAAOZ,SAASa,UAEe,UAA7BD,OAAOZ,SAASa,UAEhBD,OAAOZ,SAASa,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,kB","file":"static/js/main.2a62a5f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\n// import Select from \"./Select\";\r\n\r\nclass Api extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      posts: [],\r\n      timeZone: \"\",\r\n      currentTime: \"\",\r\n      zones: \"\",\r\n      selectZone: \"\",\r\n      selectedTime: \"\",\r\n      selectedDate: \"\",\r\n      selectedGmt: \"\"\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"https://worldtimeapi.org/api/ip\")\r\n      .then(response => {\r\n        //console.log(response);\r\n        this.setState({ timeZone: response.data });\r\n      })\r\n      .catch(error => console.log(error));\r\n\r\n    axios\r\n      .get(\"https://worldtimeapi.org/api/timezone\")\r\n      .then(response => {\r\n        //console.log(response);\r\n        this.setState({ zones: response.data });\r\n      })\r\n      .catch(error => console.log(error));\r\n\r\n    setInterval(() => {\r\n      this.dynamictime();\r\n    }, 1000);\r\n    //console.log('selected time:', this.state.selectedTime);\r\n  }\r\n\r\n  dynamictime = () => {\r\n    this.setState({ currentTime: moment().format(\"MMMM Do YYYY, h:mm:ss a\") });\r\n  };\r\n  selectHandler = event => {\r\n    this.setState({ selectZone: event.target.value });\r\n    this.setTime(event);\r\n  };\r\n  setTime = event => {\r\n    let url = \"https://worldtimeapi.org/api/timezone/\" + event.target.value;\r\n    // console.log(url);\r\n    axios\r\n      .get(url)\r\n      .then(response => {\r\n        //console.log(response);\r\n        let time = response.data.datetime;\r\n        let localTime = this.changeTimeFormat(time.split(\"T\")[1].split(\".\")[0]);\r\n        console.log(localTime);\r\n        this.setState({\r\n          selectedDate: time.split(\"T\")[0],\r\n          selectedTime: localTime,\r\n          selectedGmt: time.includes(\"+\")\r\n            ? time.split(\"+\")[1]\r\n            : time.split(\"-\")[1]\r\n        });\r\n        //console.log(this.state.selectedTime, time);\r\n      })\r\n      .catch(error => console.log(error));\r\n  };\r\n  changeTimeFormat(time) {\r\n    let hours = time.split(\":\")[0];\r\n    let mins = time.split(\":\")[1] + \":\" + time.split(\":\")[2];\r\n    let localTime = \"\";\r\n    hours =\r\n      hours > 12 ? hours - 12 : hours === 0 ? (hours = 12) : (hours = hours);\r\n    localTime =\r\n      time.split(\":\")[0] >= 12 ? `${hours}:${mins} PM` : `${hours}:${mins} AM`;\r\n    return localTime;\r\n  }\r\n  render() {\r\n    const {\r\n      posts,\r\n      timeZone,\r\n      zones,\r\n      selectZone,\r\n      selectedTime,\r\n      currentTime,\r\n      selectedDate,\r\n      selectedGmt\r\n    } = this.state;\r\n    let location = this.state.zones;\r\n    return (\r\n      <div>\r\n        <center>\r\n          <h1>Time Zone</h1>\r\n          <p>Your Current Time Zone: {timeZone.timezone} </p>\r\n          <p>Current Date & Time: {currentTime}</p>\r\n          <select\r\n            className=\"form-control col-sm-4\"\r\n            onChange={this.selectHandler}\r\n          >\r\n            <option value=\"\">Choose your location</option>\r\n            {location.length\r\n              ? location.map(loc => (\r\n                  <option key={loc} value={loc}>\r\n                    {loc}\r\n                  </option>\r\n                ))\r\n              : \"\"}\r\n          </select>\r\n          <h2>{selectZone}</h2>\r\n          {selectedDate !== \"\" && selectedDate !== undefined ? (\r\n            <p>Date: {selectedDate}</p>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {selectedTime !== \"\" && selectedTime !== undefined ? (\r\n            <p>Time: {selectedTime}</p>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {/* <Select /> */}\r\n        </center>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Api;\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Api from \"./components/Api\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Api></Api>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\r\nimport \"mdbreact/dist/css/mdb.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}