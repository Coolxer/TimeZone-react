{"version":3,"sources":["logo.svg","components/Api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Api","props","dynamictime","setState","currentTime","moment","format","selectHandler","event","selectZone","target","value","setTime","url","axios","get","then","response","time","data","datetime","selectedDate","split","selectedTime","selectedGmt","includes","catch","error","console","log","state","posts","timeZone","zones","setInterval","this","location","timezone","onChange","length","map","loc","key","undefined","Component","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,8LCmH5BC,E,YA9Gb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAsCRC,YAAc,WACZ,EAAKC,SAAS,CAAEC,YAAaC,MAASC,OAAO,8BAxC5B,EA0CnBC,cAAgB,SAAAC,GACd,EAAKL,SAAS,CAAEM,WAAYD,EAAME,OAAOC,QACzC,EAAKC,QAAQJ,IA5CI,EA8CnBI,QAAU,SAAAJ,GACR,IAAIK,EAAM,wCAA0CL,EAAME,OAAOC,MAEjEG,IACGC,IAAIF,GACJG,MAAK,SAAAC,GAEJ,IAAIC,EAAOD,EAASE,KAAKC,SACzB,EAAKjB,SAAS,CACZkB,aAAcH,EAAKI,MAAM,KAAK,GAC9BC,aAAcL,EAAKI,MAAM,KAAK,GAAGA,MAAM,KAAK,GAC5CE,YAAaN,EAAKO,SAAS,KACvBP,EAAKI,MAAM,KAAK,GAChBJ,EAAKI,MAAM,KAAK,QAIvBI,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,OA7D9B,EAAKG,MAAQ,CACXC,MAAO,GACPC,SAAU,GACV5B,YAAa,GACb6B,MAAO,GACPxB,WAAY,GACZc,aAAc,GACdF,aAAc,GACdG,YAAa,IAVE,E,iFAaE,IAAD,OAKlBV,IACGC,IAAI,mCACJC,MAAK,SAAAC,GAEJ,EAAKd,SAAS,CAAE6B,SAAUf,EAASE,UAEpCO,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAE9Bb,IACGC,IAAI,yCACJC,MAAK,SAAAC,GAEJ,EAAKd,SAAS,CAAE8B,MAAOhB,EAASE,UAEjCO,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAE9BO,aAAY,WACV,EAAKhC,gBACJ,O,+BA6BK,IAAD,EAUHiC,KAAKL,MAPPE,GAHK,EAELD,MAFK,EAGLC,UAEAvB,GALK,EAILwB,MAJK,EAKLxB,YACAc,EANK,EAMLA,aACAnB,EAPK,EAOLA,YACAiB,EARK,EAQLA,aAGEe,GAXG,EASLZ,YAEaW,KAAKL,MAAMG,OAC1B,OACE,6BACE,gCACE,yCACA,sDAA4BD,EAASK,SAArC,KACA,mDAAyBjC,GACzB,4BAAQkC,SAAUH,KAAK5B,eACrB,mDACC6B,EAASG,OACNH,EAASI,KAAI,SAAAC,GAAG,OACd,4BAAQC,IAAKD,EAAK9B,MAAO8B,GACtBA,MAGL,IAEN,4BAAKhC,GACa,KAAjBY,QAAwCsB,IAAjBtB,EACtB,oCAAUA,GAEV,GAEgB,KAAjBE,QAAwCoB,IAAjBpB,EACtB,oCAAUA,GAEV,S,GAvGMqB,aCQHC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,MAAK,SAAAyC,GACjCA,EAAaC,kB","file":"static/js/main.a1c5d87c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\n\r\nclass Api extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      posts: [],\r\n      timeZone: \"\",\r\n      currentTime: \"\",\r\n      zones: \"\",\r\n      selectZone: \"\",\r\n      selectedTime: \"\",\r\n      selectedDate: \"\",\r\n      selectedGmt: \"\"\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    // axios.get('https://jsonplaceholder.typicode.com/posts').then(response => {console.log(response);\r\n    //     this.setState({posts: response.data});\r\n    // })\r\n    // .catch(error => console.log(error));\r\n    axios\r\n      .get(\"https://worldtimeapi.org/api/ip\")\r\n      .then(response => {\r\n        //console.log(response);\r\n        this.setState({ timeZone: response.data });\r\n      })\r\n      .catch(error => console.log(error));\r\n\r\n    axios\r\n      .get(\"https://worldtimeapi.org/api/timezone\")\r\n      .then(response => {\r\n        //console.log(response);\r\n        this.setState({ zones: response.data });\r\n      })\r\n      .catch(error => console.log(error));\r\n\r\n    setInterval(() => {\r\n      this.dynamictime();\r\n    }, 1000);\r\n    //console.log('selected time:', this.state.selectedTime);\r\n  }\r\n  dynamictime = () => {\r\n    this.setState({ currentTime: moment().format(\"MMMM Do YYYY, h:mm:ss a\") });\r\n  };\r\n  selectHandler = event => {\r\n    this.setState({ selectZone: event.target.value });\r\n    this.setTime(event);\r\n  };\r\n  setTime = event => {\r\n    let url = \"http://worldtimeapi.org/api/timezone/\" + event.target.value;\r\n    // console.log(url);\r\n    axios\r\n      .get(url)\r\n      .then(response => {\r\n        //console.log(response);\r\n        let time = response.data.datetime;\r\n        this.setState({\r\n          selectedDate: time.split(\"T\")[0],\r\n          selectedTime: time.split(\"T\")[1].split(\".\")[0],\r\n          selectedGmt: time.includes(\"+\")\r\n            ? time.split(\"+\")[1]\r\n            : time.split(\"-\")[1]\r\n        });\r\n        //console.log(this.state.selectedTime, time);\r\n      })\r\n      .catch(error => console.log(error));\r\n  };\r\n  render() {\r\n    const {\r\n      posts,\r\n      timeZone,\r\n      zones,\r\n      selectZone,\r\n      selectedTime,\r\n      currentTime,\r\n      selectedDate,\r\n      selectedGmt\r\n    } = this.state;\r\n    let location = this.state.zones;\r\n    return (\r\n      <div>\r\n        <center>\r\n          <h1>Time Zone</h1>\r\n          <p>Your Current Time Zone: {timeZone.timezone} </p>\r\n          <p>Current Date & Time: {currentTime}</p>\r\n          <select onChange={this.selectHandler}>\r\n            <option>Select location</option>\r\n            {location.length\r\n              ? location.map(loc => (\r\n                  <option key={loc} value={loc}>\r\n                    {loc}\r\n                  </option>\r\n                ))\r\n              : \"\"}\r\n          </select>\r\n          <h2>{selectZone}</h2>\r\n          {selectedDate !== \"\" && selectedDate !== undefined ? (\r\n            <p>Date: {selectedDate}</p>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {selectedTime !== \"\" && selectedTime !== undefined ? (\r\n            <p>Time: {selectedTime}</p>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </center>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Api;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Api from './components/Api';\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Api></Api>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}